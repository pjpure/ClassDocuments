////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Selectt.vf
// /___/   /\     Timestamp : 11/05/2020 13:59:39
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/.Xilinx/Lab9_1/Selectt.vf -w C:/.Xilinx/Lab9_1/Selectt.sch
//Design Name: Selectt
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module ADD8_HXILINX_Selectt (CO, OFL, S, A, B, CI);


   output 	      CO;
   output 	      OFL;
   output [7:0]       S;

   input  [7:0]       A;
   input  [7:0]       B;
   input              CI;

   assign   {CO, S} = A + B + CI;
   assign   OFL     = ( A[7] & B[7] & (~S[7])) | ((~A[7]) & (~B[7]) & S[7]);

endmodule
`timescale  100 ps / 10 ps

module ADSU8_HXILINX_Selectt (CO, OFL, S, A, ADD, B, CI);

   
   output             CO;
   output             OFL;
   output [7:0]       S;

   input  [7:0]       A;
   input  	      ADD;
   input  [7:0]       B;
   input              CI;

   reg    [8:0]       adsu_tmp;  

   always @ (A, ADD, B, CI) 
   begin
      if(ADD)
         adsu_tmp = A + B + CI;
      else
         adsu_tmp = A - (!CI) - B;
   end

   assign S   =  adsu_tmp[7:0];
   assign CO  =  ADD ? adsu_tmp[8] : ~adsu_tmp[8];
   assign OFL =  ADD ? ( (A[7] & B[7] & (~S[7])) | ((~A[7]) & (~B[7]) & S[7]) ) : ( (A[7] & (~B[7]) & (~S[7])) | ((~A[7]) & B[7] & S[7]) );

endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_Selectt (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_Selectt(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module Mux32_MUSER_Selectt(iAdd, 
                           iShift, 
                           iSub, 
                           iXor, 
                           PB, 
                           MN4, 
                           MN5, 
                           MN6, 
                           MN7, 
                           OutM);

    input [7:0] iAdd;
    input [7:0] iShift;
    input [7:0] iSub;
    input [7:0] iXor;
    input PB;
   output MN4;
   output MN5;
   output MN6;
   output MN7;
   output [7:0] OutM;
   
   wire XLXN_19;
   wire XLXN_22;
   wire XLXN_90;
   wire XLXN_98;
   wire XLXN_99;
   wire XLXN_100;
   wire XLXN_101;
   
   (* HU_SET = "XLXI_5_66" *) 
   CB2CE_HXILINX_Selectt  XLXI_5 (.C(PB), 
                                 .CE(XLXN_22), 
                                 .CLR(XLXN_19), 
                                 .CEO(), 
                                 .Q0(XLXN_98), 
                                 .Q1(XLXN_99), 
                                 .TC());
   (* HU_SET = "XLXI_6_58" *) 
   M4_1E_HXILINX_Selectt  XLXI_6 (.D0(iAdd[0]), 
                                 .D1(iSub[0]), 
                                 .D2(iXor[0]), 
                                 .D3(iShift[0]), 
                                 .E(XLXN_90), 
                                 .S0(XLXN_98), 
                                 .S1(XLXN_99), 
                                 .O(OutM[0]));
   VCC  XLXI_8 (.P(XLXN_22));
   (* HU_SET = "XLXI_22_59" *) 
   M4_1E_HXILINX_Selectt  XLXI_22 (.D0(iAdd[1]), 
                                  .D1(iSub[1]), 
                                  .D2(iXor[1]), 
                                  .D3(iShift[1]), 
                                  .E(XLXN_90), 
                                  .S0(XLXN_98), 
                                  .S1(XLXN_99), 
                                  .O(OutM[1]));
   (* HU_SET = "XLXI_23_60" *) 
   M4_1E_HXILINX_Selectt  XLXI_23 (.D0(iAdd[2]), 
                                  .D1(iSub[2]), 
                                  .D2(iXor[2]), 
                                  .D3(iShift[2]), 
                                  .E(XLXN_90), 
                                  .S0(XLXN_98), 
                                  .S1(XLXN_99), 
                                  .O(OutM[2]));
   (* HU_SET = "XLXI_24_61" *) 
   M4_1E_HXILINX_Selectt  XLXI_24 (.D0(iAdd[3]), 
                                  .D1(iSub[3]), 
                                  .D2(iXor[3]), 
                                  .D3(iShift[3]), 
                                  .E(XLXN_90), 
                                  .S0(XLXN_98), 
                                  .S1(XLXN_99), 
                                  .O(OutM[3]));
   (* HU_SET = "XLXI_25_62" *) 
   M4_1E_HXILINX_Selectt  XLXI_25 (.D0(iAdd[4]), 
                                  .D1(iSub[4]), 
                                  .D2(iXor[4]), 
                                  .D3(iShift[4]), 
                                  .E(XLXN_90), 
                                  .S0(XLXN_98), 
                                  .S1(XLXN_99), 
                                  .O(OutM[4]));
   (* HU_SET = "XLXI_26_63" *) 
   M4_1E_HXILINX_Selectt  XLXI_26 (.D0(iAdd[5]), 
                                  .D1(iSub[5]), 
                                  .D2(iXor[5]), 
                                  .D3(iShift[5]), 
                                  .E(XLXN_90), 
                                  .S0(XLXN_98), 
                                  .S1(XLXN_99), 
                                  .O(OutM[5]));
   (* HU_SET = "XLXI_27_64" *) 
   M4_1E_HXILINX_Selectt  XLXI_27 (.D0(iAdd[6]), 
                                  .D1(iSub[6]), 
                                  .D2(iXor[6]), 
                                  .D3(iShift[6]), 
                                  .E(XLXN_90), 
                                  .S0(XLXN_98), 
                                  .S1(XLXN_99), 
                                  .O(OutM[6]));
   (* HU_SET = "XLXI_28_65" *) 
   M4_1E_HXILINX_Selectt  XLXI_28 (.D0(iAdd[7]), 
                                  .D1(iSub[7]), 
                                  .D2(iXor[7]), 
                                  .D3(iShift[7]), 
                                  .E(XLXN_90), 
                                  .S0(XLXN_98), 
                                  .S1(XLXN_99), 
                                  .O(OutM[7]));
   GND  XLXI_30 (.G(XLXN_19));
   VCC  XLXI_32 (.P(XLXN_90));
   INV  XLXI_33 (.I(XLXN_98), 
                .O(XLXN_100));
   INV  XLXI_34 (.I(XLXN_99), 
                .O(XLXN_101));
   AND2  XLXI_35 (.I0(XLXN_101), 
                 .I1(XLXN_100), 
                 .O(MN7));
   AND2  XLXI_36 (.I0(XLXN_99), 
                 .I1(XLXN_100), 
                 .O(MN6));
   AND2  XLXI_37 (.I0(XLXN_101), 
                 .I1(XLXN_98), 
                 .O(MN5));
   AND2  XLXI_38 (.I0(XLXN_99), 
                 .I1(XLXN_98), 
                 .O(MN4));
endmodule
`timescale 1ns / 1ps

module XorX_MUSER_Selectt(In1, 
                          In2, 
                          OutX);

    input [7:0] In1;
    input [7:0] In2;
   output [7:0] OutX;
   
   
   XOR2  XLXI_1 (.I0(In2[0]), 
                .I1(In1[0]), 
                .O(OutX[0]));
   XOR2  XLXI_2 (.I0(In2[1]), 
                .I1(In1[1]), 
                .O(OutX[1]));
   XOR2  XLXI_3 (.I0(In2[2]), 
                .I1(In1[2]), 
                .O(OutX[2]));
   XOR2  XLXI_4 (.I0(In2[3]), 
                .I1(In1[3]), 
                .O(OutX[3]));
   XOR2  XLXI_5 (.I0(In2[4]), 
                .I1(In1[4]), 
                .O(OutX[4]));
   XOR2  XLXI_6 (.I0(In2[5]), 
                .I1(In1[5]), 
                .O(OutX[5]));
   XOR2  XLXI_7 (.I0(In2[6]), 
                .I1(In1[6]), 
                .O(OutX[6]));
   XOR2  XLXI_8 (.I0(In2[7]), 
                .I1(In1[7]), 
                .O(OutX[7]));
endmodule
`timescale 1ns / 1ps

module Sub_MUSER_Selectt(In1, 
                         In2, 
                         OutS);

    input [7:0] In1;
    input [7:0] In2;
   output [7:0] OutS;
   
   wire XLXN_3;
   wire XLXN_4;
   
   (* HU_SET = "XLXI_1_67" *) 
   ADSU8_HXILINX_Selectt  XLXI_1 (.A(In1[7:0]), 
                                 .ADD(XLXN_4), 
                                 .B(In2[7:0]), 
                                 .CI(XLXN_3), 
                                 .CO(), 
                                 .OFL(), 
                                 .S(OutS[7:0]));
   GND  XLXI_3 (.G(XLXN_4));
   VCC  XLXI_4 (.P(XLXN_3));
endmodule
`timescale 1ns / 1ps

module Add_MUSER_Selectt(In1, 
                         In2, 
                         OutA);

    input [7:0] In1;
    input [7:0] In2;
   output [7:0] OutA;
   
   wire XLXN_33;
   
   (* HU_SET = "XLXI_4_68" *) 
   ADD8_HXILINX_Selectt  XLXI_4 (.A(In1[7:0]), 
                                .B(In2[7:0]), 
                                .CI(XLXN_33), 
                                .CO(), 
                                .OFL(), 
                                .S(OutA[7:0]));
   GND  XLXI_5 (.G(XLXN_33));
endmodule
`timescale 1ns / 1ps

module shift_MUSER_Selectt(In1, 
                           OutS);

    input [7:0] In1;
   output [7:0] OutS;
   
   wire XLXN_31;
   wire XLXN_42;
   wire XLXN_43;
   wire XLXN_44;
   wire XLXN_50;
   wire XLXN_51;
   wire XLXN_52;
   
   GND  XLXI_19 (.G(OutS[0]));
   OR2  XLXI_21 (.I0(XLXN_31), 
                .I1(In1[0]), 
                .O(OutS[1]));
   OR2  XLXI_22 (.I0(XLXN_42), 
                .I1(In1[1]), 
                .O(OutS[2]));
   OR2  XLXI_23 (.I0(XLXN_43), 
                .I1(In1[2]), 
                .O(OutS[3]));
   OR2  XLXI_24 (.I0(XLXN_44), 
                .I1(In1[3]), 
                .O(OutS[4]));
   OR2  XLXI_25 (.I0(XLXN_50), 
                .I1(In1[4]), 
                .O(OutS[5]));
   OR2  XLXI_26 (.I0(XLXN_51), 
                .I1(In1[5]), 
                .O(OutS[6]));
   OR2  XLXI_27 (.I0(XLXN_52), 
                .I1(In1[6]), 
                .O(OutS[7]));
   GND  XLXI_28 (.G(XLXN_31));
   GND  XLXI_29 (.G(XLXN_42));
   GND  XLXI_30 (.G(XLXN_43));
   GND  XLXI_31 (.G(XLXN_44));
   GND  XLXI_32 (.G(XLXN_50));
   GND  XLXI_33 (.G(XLXN_51));
   GND  XLXI_34 (.G(XLXN_52));
endmodule
`timescale 1ns / 1ps

module Selectt(DP, 
               PB, 
               SW, 
               MN4, 
               MN5, 
               MN6, 
               MN7, 
               OutSe);

    input [1:8] DP;
    input PB;
    input [7:0] SW;
   output MN4;
   output MN5;
   output MN6;
   output MN7;
   output [7:0] OutSe;
   
   wire [7:0] XLXN_9;
   wire [7:0] XLXN_10;
   wire [7:0] XLXN_11;
   wire [7:0] XLXN_12;
   
   shift_MUSER_Selectt  XLXI_1 (.In1(SW[7:0]), 
                               .OutS(XLXN_12[7:0]));
   Add_MUSER_Selectt  XLXI_2 (.In1(SW[7:0]), 
                             .In2(DP[1:8]), 
                             .OutA(XLXN_9[7:0]));
   Sub_MUSER_Selectt  XLXI_3 (.In1(SW[7:0]), 
                             .In2(DP[1:8]), 
                             .OutS(XLXN_10[7:0]));
   XorX_MUSER_Selectt  XLXI_4 (.In1(SW[7:0]), 
                              .In2(DP[1:8]), 
                              .OutX(XLXN_11[7:0]));
   Mux32_MUSER_Selectt  XLXI_5 (.iAdd(XLXN_9[7:0]), 
                               .iShift(XLXN_12[7:0]), 
                               .iSub(XLXN_10[7:0]), 
                               .iXor(XLXN_11[7:0]), 
                               .PB(PB), 
                               .MN4(MN4), 
                               .MN5(MN5), 
                               .MN6(MN6), 
                               .MN7(MN7), 
                               .OutM(OutSe[7:0]));
endmodule
