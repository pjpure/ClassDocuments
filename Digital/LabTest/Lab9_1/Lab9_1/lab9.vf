////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : lab9.vf
// /___/   /\     Timestamp : 11/05/2020 13:59:38
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/.Xilinx/Lab9_1/lab9.vf -w C:/.Xilinx/Lab9_1/lab9.sch
//Design Name: lab9
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module D4_16E_HXILINX_lab9 (D0, D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, A0, A1, A2, A3, E);
    

   output D0;
   output D1;
   output D2;
   output D3;
   output D4;
   output D5;
   output D6;
   output D7;
   output D8;
   output D9;
   output D10;
   output D11;
   output D12;
   output D13;
   output D14;
   output D15;

   input  A0;
   input  A1;
   input  A2;
   input  A3;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;
   reg D4;
   reg D5;
   reg D6;
   reg D7;
   reg D8;
   reg D9;
   reg D10;
   reg D11;
   reg D12;
   reg D13;
   reg D14;
   reg D15;

      always @ (A0 or A1 or A2 or A3 or E)
      begin
         if(!E)
           {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0000;
        else
        begin
           case({A3,A2,A1,A0})
             4'b0000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0001;
             4'b0001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0010;
             4'b0010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0100;
             4'b0011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_1000;
             4'b0100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0001_0000;
             4'b0101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0010_0000;
             4'b0110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0100_0000;
             4'b0111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_1000_0000;
             4'b1000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0001_0000_0000;
             4'b1001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0010_0000_0000;
             4'b1010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0100_0000_0000;
             4'b1011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_1000_0000_0000;
             4'b1100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0001_0000_0000_0000;
             4'b1101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0010_0000_0000_0000;
             4'b1110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0100_0000_0000_0000;
             4'b1111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b1000_0000_0000_0000;
          endcase
        end
     end 

endmodule
`timescale  100 ps / 10 ps

module ADD8_HXILINX_lab9 (CO, OFL, S, A, B, CI);


   output 	      CO;
   output 	      OFL;
   output [7:0]       S;

   input  [7:0]       A;
   input  [7:0]       B;
   input              CI;

   assign   {CO, S} = A + B + CI;
   assign   OFL     = ( A[7] & B[7] & (~S[7])) | ((~A[7]) & (~B[7]) & S[7]);

endmodule
`timescale  100 ps / 10 ps

module OR6_HXILINX_lab9 (O, I0, I1, I2, I3, I4, I5);
    

   output O;

   input I0;
   input I1;
   input I2;
   input I3;
   input I4;
   input I5;

assign O = (I0 || I1 || I2 || I3 || I4 || I5);

endmodule
`timescale  100 ps / 10 ps

module ADSU8_HXILINX_lab9 (CO, OFL, S, A, ADD, B, CI);

   
   output             CO;
   output             OFL;
   output [7:0]       S;

   input  [7:0]       A;
   input  	      ADD;
   input  [7:0]       B;
   input              CI;

   reg    [8:0]       adsu_tmp;  

   always @ (A, ADD, B, CI) 
   begin
      if(ADD)
         adsu_tmp = A + B + CI;
      else
         adsu_tmp = A - (!CI) - B;
   end

   assign S   =  adsu_tmp[7:0];
   assign CO  =  ADD ? adsu_tmp[8] : ~adsu_tmp[8];
   assign OFL =  ADD ? ( (A[7] & B[7] & (~S[7])) | ((~A[7]) & (~B[7]) & S[7]) ) : ( (A[7] & (~B[7]) & (~S[7])) | ((~A[7]) & B[7] & S[7]) );

endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_lab9 (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale 100 ps / 10 ps

module FJKC_HXILINX_lab9(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale  100 ps / 10 ps

module M2_1_HXILINX_lab9 (O, D0, D1, S0);
    

   output O;

   input  D0;
   input  D1;
   input  S0;

   reg O;

   always @ ( D0 or D1 or S0)
   begin
      case(S0)
      1'b0 : O <= D0;
      1'b1 : O <= D1;
      endcase
   end
    
endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_lab9(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module Mux32_MUSER_lab9(iAdd, 
                        iShift, 
                        iSub, 
                        iXor, 
                        PB, 
                        MN4, 
                        MN5, 
                        MN6, 
                        MN7, 
                        OutM);

    input [7:0] iAdd;
    input [7:0] iShift;
    input [7:0] iSub;
    input [7:0] iXor;
    input PB;
   output MN4;
   output MN5;
   output MN6;
   output MN7;
   output [7:0] OutM;
   
   wire XLXN_19;
   wire XLXN_22;
   wire XLXN_90;
   wire XLXN_98;
   wire XLXN_99;
   wire XLXN_100;
   wire XLXN_101;
   
   (* HU_SET = "XLXI_5_47" *) 
   CB2CE_HXILINX_lab9  XLXI_5 (.C(PB), 
                              .CE(XLXN_22), 
                              .CLR(XLXN_19), 
                              .CEO(), 
                              .Q0(XLXN_98), 
                              .Q1(XLXN_99), 
                              .TC());
   (* HU_SET = "XLXI_6_39" *) 
   M4_1E_HXILINX_lab9  XLXI_6 (.D0(iAdd[0]), 
                              .D1(iSub[0]), 
                              .D2(iXor[0]), 
                              .D3(iShift[0]), 
                              .E(XLXN_90), 
                              .S0(XLXN_98), 
                              .S1(XLXN_99), 
                              .O(OutM[0]));
   VCC  XLXI_8 (.P(XLXN_22));
   (* HU_SET = "XLXI_22_40" *) 
   M4_1E_HXILINX_lab9  XLXI_22 (.D0(iAdd[1]), 
                               .D1(iSub[1]), 
                               .D2(iXor[1]), 
                               .D3(iShift[1]), 
                               .E(XLXN_90), 
                               .S0(XLXN_98), 
                               .S1(XLXN_99), 
                               .O(OutM[1]));
   (* HU_SET = "XLXI_23_41" *) 
   M4_1E_HXILINX_lab9  XLXI_23 (.D0(iAdd[2]), 
                               .D1(iSub[2]), 
                               .D2(iXor[2]), 
                               .D3(iShift[2]), 
                               .E(XLXN_90), 
                               .S0(XLXN_98), 
                               .S1(XLXN_99), 
                               .O(OutM[2]));
   (* HU_SET = "XLXI_24_42" *) 
   M4_1E_HXILINX_lab9  XLXI_24 (.D0(iAdd[3]), 
                               .D1(iSub[3]), 
                               .D2(iXor[3]), 
                               .D3(iShift[3]), 
                               .E(XLXN_90), 
                               .S0(XLXN_98), 
                               .S1(XLXN_99), 
                               .O(OutM[3]));
   (* HU_SET = "XLXI_25_43" *) 
   M4_1E_HXILINX_lab9  XLXI_25 (.D0(iAdd[4]), 
                               .D1(iSub[4]), 
                               .D2(iXor[4]), 
                               .D3(iShift[4]), 
                               .E(XLXN_90), 
                               .S0(XLXN_98), 
                               .S1(XLXN_99), 
                               .O(OutM[4]));
   (* HU_SET = "XLXI_26_44" *) 
   M4_1E_HXILINX_lab9  XLXI_26 (.D0(iAdd[5]), 
                               .D1(iSub[5]), 
                               .D2(iXor[5]), 
                               .D3(iShift[5]), 
                               .E(XLXN_90), 
                               .S0(XLXN_98), 
                               .S1(XLXN_99), 
                               .O(OutM[5]));
   (* HU_SET = "XLXI_27_45" *) 
   M4_1E_HXILINX_lab9  XLXI_27 (.D0(iAdd[6]), 
                               .D1(iSub[6]), 
                               .D2(iXor[6]), 
                               .D3(iShift[6]), 
                               .E(XLXN_90), 
                               .S0(XLXN_98), 
                               .S1(XLXN_99), 
                               .O(OutM[6]));
   (* HU_SET = "XLXI_28_46" *) 
   M4_1E_HXILINX_lab9  XLXI_28 (.D0(iAdd[7]), 
                               .D1(iSub[7]), 
                               .D2(iXor[7]), 
                               .D3(iShift[7]), 
                               .E(XLXN_90), 
                               .S0(XLXN_98), 
                               .S1(XLXN_99), 
                               .O(OutM[7]));
   GND  XLXI_30 (.G(XLXN_19));
   VCC  XLXI_32 (.P(XLXN_90));
   INV  XLXI_33 (.I(XLXN_98), 
                .O(XLXN_100));
   INV  XLXI_34 (.I(XLXN_99), 
                .O(XLXN_101));
   AND2  XLXI_35 (.I0(XLXN_101), 
                 .I1(XLXN_100), 
                 .O(MN7));
   AND2  XLXI_36 (.I0(XLXN_99), 
                 .I1(XLXN_100), 
                 .O(MN6));
   AND2  XLXI_37 (.I0(XLXN_101), 
                 .I1(XLXN_98), 
                 .O(MN5));
   AND2  XLXI_38 (.I0(XLXN_99), 
                 .I1(XLXN_98), 
                 .O(MN4));
endmodule
`timescale 1ns / 1ps

module XorX_MUSER_lab9(In1, 
                       In2, 
                       OutX);

    input [7:0] In1;
    input [7:0] In2;
   output [7:0] OutX;
   
   
   XOR2  XLXI_1 (.I0(In2[0]), 
                .I1(In1[0]), 
                .O(OutX[0]));
   XOR2  XLXI_2 (.I0(In2[1]), 
                .I1(In1[1]), 
                .O(OutX[1]));
   XOR2  XLXI_3 (.I0(In2[2]), 
                .I1(In1[2]), 
                .O(OutX[2]));
   XOR2  XLXI_4 (.I0(In2[3]), 
                .I1(In1[3]), 
                .O(OutX[3]));
   XOR2  XLXI_5 (.I0(In2[4]), 
                .I1(In1[4]), 
                .O(OutX[4]));
   XOR2  XLXI_6 (.I0(In2[5]), 
                .I1(In1[5]), 
                .O(OutX[5]));
   XOR2  XLXI_7 (.I0(In2[6]), 
                .I1(In1[6]), 
                .O(OutX[6]));
   XOR2  XLXI_8 (.I0(In2[7]), 
                .I1(In1[7]), 
                .O(OutX[7]));
endmodule
`timescale 1ns / 1ps

module Sub_MUSER_lab9(In1, 
                      In2, 
                      OutS);

    input [7:0] In1;
    input [7:0] In2;
   output [7:0] OutS;
   
   wire XLXN_3;
   wire XLXN_4;
   
   (* HU_SET = "XLXI_1_48" *) 
   ADSU8_HXILINX_lab9  XLXI_1 (.A(In1[7:0]), 
                              .ADD(XLXN_4), 
                              .B(In2[7:0]), 
                              .CI(XLXN_3), 
                              .CO(), 
                              .OFL(), 
                              .S(OutS[7:0]));
   GND  XLXI_3 (.G(XLXN_4));
   VCC  XLXI_4 (.P(XLXN_3));
endmodule
`timescale 1ns / 1ps

module Add_MUSER_lab9(In1, 
                      In2, 
                      OutA);

    input [7:0] In1;
    input [7:0] In2;
   output [7:0] OutA;
   
   wire XLXN_33;
   
   (* HU_SET = "XLXI_4_49" *) 
   ADD8_HXILINX_lab9  XLXI_4 (.A(In1[7:0]), 
                             .B(In2[7:0]), 
                             .CI(XLXN_33), 
                             .CO(), 
                             .OFL(), 
                             .S(OutA[7:0]));
   GND  XLXI_5 (.G(XLXN_33));
endmodule
`timescale 1ns / 1ps

module shift_MUSER_lab9(In1, 
                        OutS);

    input [7:0] In1;
   output [7:0] OutS;
   
   wire XLXN_31;
   wire XLXN_42;
   wire XLXN_43;
   wire XLXN_44;
   wire XLXN_50;
   wire XLXN_51;
   wire XLXN_52;
   
   GND  XLXI_19 (.G(OutS[0]));
   OR2  XLXI_21 (.I0(XLXN_31), 
                .I1(In1[0]), 
                .O(OutS[1]));
   OR2  XLXI_22 (.I0(XLXN_42), 
                .I1(In1[1]), 
                .O(OutS[2]));
   OR2  XLXI_23 (.I0(XLXN_43), 
                .I1(In1[2]), 
                .O(OutS[3]));
   OR2  XLXI_24 (.I0(XLXN_44), 
                .I1(In1[3]), 
                .O(OutS[4]));
   OR2  XLXI_25 (.I0(XLXN_50), 
                .I1(In1[4]), 
                .O(OutS[5]));
   OR2  XLXI_26 (.I0(XLXN_51), 
                .I1(In1[5]), 
                .O(OutS[6]));
   OR2  XLXI_27 (.I0(XLXN_52), 
                .I1(In1[6]), 
                .O(OutS[7]));
   GND  XLXI_28 (.G(XLXN_31));
   GND  XLXI_29 (.G(XLXN_42));
   GND  XLXI_30 (.G(XLXN_43));
   GND  XLXI_31 (.G(XLXN_44));
   GND  XLXI_32 (.G(XLXN_50));
   GND  XLXI_33 (.G(XLXN_51));
   GND  XLXI_34 (.G(XLXN_52));
endmodule
`timescale 1ns / 1ps

module Selectt_MUSER_lab9(DP, 
                          PB, 
                          SW, 
                          MN4, 
                          MN5, 
                          MN6, 
                          MN7, 
                          OutSe);

    input [1:8] DP;
    input PB;
    input [7:0] SW;
   output MN4;
   output MN5;
   output MN6;
   output MN7;
   output [7:0] OutSe;
   
   wire [7:0] XLXN_9;
   wire [7:0] XLXN_10;
   wire [7:0] XLXN_11;
   wire [7:0] XLXN_12;
   
   shift_MUSER_lab9  XLXI_1 (.In1(SW[7:0]), 
                            .OutS(XLXN_12[7:0]));
   Add_MUSER_lab9  XLXI_2 (.In1(SW[7:0]), 
                          .In2(DP[1:8]), 
                          .OutA(XLXN_9[7:0]));
   Sub_MUSER_lab9  XLXI_3 (.In1(SW[7:0]), 
                          .In2(DP[1:8]), 
                          .OutS(XLXN_10[7:0]));
   XorX_MUSER_lab9  XLXI_4 (.In1(SW[7:0]), 
                           .In2(DP[1:8]), 
                           .OutX(XLXN_11[7:0]));
   Mux32_MUSER_lab9  XLXI_5 (.iAdd(XLXN_9[7:0]), 
                            .iShift(XLXN_12[7:0]), 
                            .iSub(XLXN_10[7:0]), 
                            .iXor(XLXN_11[7:0]), 
                            .PB(PB), 
                            .MN4(MN4), 
                            .MN5(MN5), 
                            .MN6(MN6), 
                            .MN7(MN7), 
                            .OutM(OutSe[7:0]));
endmodule
`timescale 1ns / 1ps

module Mux8_4_MUSER_lab9(clock, 
                         Inp, 
                         A, 
                         B, 
                         C, 
                         D);

    input clock;
    input [7:0] Inp;
   output A;
   output B;
   output C;
   output D;
   
   
   (* HU_SET = "XLXI_1_50" *) 
   M2_1_HXILINX_lab9  XLXI_1 (.D0(Inp[0]), 
                             .D1(Inp[4]), 
                             .S0(clock), 
                             .O(D));
   (* HU_SET = "XLXI_2_51" *) 
   M2_1_HXILINX_lab9  XLXI_2 (.D0(Inp[1]), 
                             .D1(Inp[5]), 
                             .S0(clock), 
                             .O(C));
   (* HU_SET = "XLXI_3_52" *) 
   M2_1_HXILINX_lab9  XLXI_3 (.D0(Inp[2]), 
                             .D1(Inp[6]), 
                             .S0(clock), 
                             .O(B));
   (* HU_SET = "XLXI_4_53" *) 
   M2_1_HXILINX_lab9  XLXI_4 (.D0(Inp[3]), 
                             .D1(Inp[7]), 
                             .S0(clock), 
                             .O(A));
endmodule
`timescale 1ns / 1ps

module BCD27_MUSER_lab9(Bit_0, 
                        Bit_1, 
                        Bit_2, 
                        Bit_3, 
                        A_7, 
                        B_7, 
                        C_7, 
                        D_7, 
                        E_7, 
                        F_7, 
                        G_7);

    input Bit_0;
    input Bit_1;
    input Bit_2;
    input Bit_3;
   output A_7;
   output B_7;
   output C_7;
   output D_7;
   output E_7;
   output F_7;
   output G_7;
   
   wire A;
   wire B;
   wire C;
   wire D0;
   wire D1;
   wire D2;
   wire D3;
   wire D4;
   wire D5;
   wire D6;
   wire D7;
   wire D8;
   wire D9;
   wire D10;
   wire D11;
   wire D12;
   wire D13;
   wire D14;
   wire D15;
   wire E;
   wire F;
   wire G;
   wire XLXN_37;
   wire XLXN_38;
   
   (* HU_SET = "XLXI_1_54" *) 
   D4_16E_HXILINX_lab9  XLXI_1 (.A0(Bit_0), 
                               .A1(Bit_1), 
                               .A2(Bit_2), 
                               .A3(Bit_3), 
                               .E(XLXN_37), 
                               .D0(D0), 
                               .D1(D1), 
                               .D2(D2), 
                               .D3(D3), 
                               .D4(D4), 
                               .D5(D5), 
                               .D6(D6), 
                               .D7(D7), 
                               .D8(D8), 
                               .D9(D9), 
                               .D10(D10), 
                               .D11(D11), 
                               .D12(D12), 
                               .D13(D13), 
                               .D14(D14), 
                               .D15(D15));
   OR4  XLXI_25 (.I0(D12), 
                .I1(D7), 
                .I2(D1), 
                .I3(D0), 
                .O(G));
   OR5  XLXI_26 (.I0(D13), 
                .I1(D7), 
                .I2(D3), 
                .I3(D2), 
                .I4(D1), 
                .O(F));
   (* HU_SET = "XLXI_27_55" *) 
   OR6_HXILINX_lab9  XLXI_27 (.I0(D9), 
                             .I1(D7), 
                             .I2(D5), 
                             .I3(D4), 
                             .I4(D3), 
                             .I5(D1), 
                             .O(E));
   OR4  XLXI_31 (.I0(D11), 
                .I1(D13), 
                .I2(D4), 
                .I3(D1), 
                .O(A));
   VCC  XLXI_32 (.P(XLXN_37));
   INV  XLXI_33 (.I(G), 
                .O(G_7));
   INV  XLXI_34 (.I(F), 
                .O(F_7));
   INV  XLXI_35 (.I(E), 
                .O(E_7));
   INV  XLXI_36 (.I(XLXN_38), 
                .O(D_7));
   INV  XLXI_37 (.I(C), 
                .O(C_7));
   INV  XLXI_38 (.I(B), 
                .O(B_7));
   INV  XLXI_39 (.I(A), 
                .O(A_7));
   OR5  XLXI_40 (.I0(D15), 
                .I1(D10), 
                .I2(D7), 
                .I3(D4), 
                .I4(D1), 
                .O(XLXN_38));
   OR4  XLXI_41 (.I0(D15), 
                .I1(D14), 
                .I2(D12), 
                .I3(D2), 
                .O(C));
   (* HU_SET = "XLXI_43_56" *) 
   OR6_HXILINX_lab9  XLXI_43 (.I0(D15), 
                             .I1(D14), 
                             .I2(D12), 
                             .I3(D11), 
                             .I4(D6), 
                             .I5(D5), 
                             .O(B));
endmodule
`timescale 1ns / 1ps

module div2_MUSER_lab9(clock_in, 
                       clock_out);

    input clock_in;
   output clock_out;
   
   wire XLXN_18;
   wire XLXN_19;
   
   (* HU_SET = "XLXI_8_57" *) 
   FJKC_HXILINX_lab9  XLXI_8 (.C(clock_in), 
                             .CLR(XLXN_18), 
                             .J(XLXN_19), 
                             .K(XLXN_19), 
                             .Q(clock_out));
   VCC  XLXI_9 (.P(XLXN_19));
   INV  XLXI_10 (.I(XLXN_19), 
                .O(XLXN_18));
endmodule
`timescale 1ns / 1ps

module DIV_MUSER_lab9(CI, 
                      CO);

    input CI;
   output CO;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   
   div2_MUSER_lab9  XLXI_1 (.clock_in(CI), 
                           .clock_out(XLXN_1));
   div2_MUSER_lab9  XLXI_2 (.clock_in(XLXN_1), 
                           .clock_out(XLXN_2));
   div2_MUSER_lab9  XLXI_3 (.clock_in(XLXN_2), 
                           .clock_out(XLXN_3));
   div2_MUSER_lab9  XLXI_4 (.clock_in(XLXN_3), 
                           .clock_out(XLXN_7));
   div2_MUSER_lab9  XLXI_5 (.clock_in(XLXN_7), 
                           .clock_out(XLXN_4));
   div2_MUSER_lab9  XLXI_6 (.clock_in(XLXN_4), 
                           .clock_out(XLXN_5));
   div2_MUSER_lab9  XLXI_7 (.clock_in(XLXN_5), 
                           .clock_out(XLXN_6));
   div2_MUSER_lab9  XLXI_8 (.clock_in(XLXN_6), 
                           .clock_out(CO));
endmodule
`timescale 1ns / 1ps

module lab9(clock, 
            DP, 
            PB1, 
            SW, 
            a, 
            b, 
            c, 
            com0, 
            com1, 
            com2, 
            com3, 
            d, 
            e, 
            f, 
            g, 
            MN4, 
            MN5, 
            MN6, 
            MN7);

    input clock;
    input [1:8] DP;
    input PB1;
    input [7:0] SW;
   output a;
   output b;
   output c;
   output com0;
   output com1;
   output com2;
   output com3;
   output d;
   output e;
   output f;
   output g;
   output MN4;
   output MN5;
   output MN6;
   output MN7;
   
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_23;
   wire [7:0] XLXN_26;
   wire com0_DUMMY;
   
   assign com0 = com0_DUMMY;
   DIV_MUSER_lab9  XLXI_7 (.CI(clock), 
                          .CO(com0_DUMMY));
   BCD27_MUSER_lab9  XLXI_8 (.Bit_0(XLXN_9), 
                            .Bit_1(XLXN_10), 
                            .Bit_2(XLXN_11), 
                            .Bit_3(XLXN_12), 
                            .A_7(a), 
                            .B_7(b), 
                            .C_7(c), 
                            .D_7(d), 
                            .E_7(e), 
                            .F_7(f), 
                            .G_7(g));
   INV  XLXI_9 (.I(com0_DUMMY), 
               .O(com1));
   VCC  XLXI_10 (.P(XLXN_23));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_11 (.I(XLXN_23), 
                 .O(com2));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_13 (.I(XLXN_23), 
                 .O(com3));
   Mux8_4_MUSER_lab9  XLXI_14 (.clock(com0_DUMMY), 
                              .Inp(XLXN_26[7:0]), 
                              .A(XLXN_12), 
                              .B(XLXN_11), 
                              .C(XLXN_10), 
                              .D(XLXN_9));
   Selectt_MUSER_lab9  XLXI_15 (.DP(DP[1:8]), 
                               .PB(PB1), 
                               .SW(SW[7:0]), 
                               .MN4(MN4), 
                               .MN5(MN5), 
                               .MN6(MN6), 
                               .MN7(MN7), 
                               .OutSe(XLXN_26[7:0]));
endmodule
