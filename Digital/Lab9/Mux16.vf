////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Mux16.vf
// /___/   /\     Timestamp : 11/04/2020 20:39:59
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/.Xilinx/Lab9/Mux16.vf -w C:/.Xilinx/Lab9/Mux16.sch
//Design Name: Mux16
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_Mux16 (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_Mux16(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module Mux16(Clock, 
             Inp, 
             S);

    input Clock;
    input [0:7] Inp;
   output [0:3] S;
   
   wire XLXN_19;
   wire XLXN_22;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_27;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_42;
   wire XLXN_43;
   wire XLXN_44;
   wire XLXN_45;
   wire XLXN_46;
   wire XLXN_47;
   wire XLXN_51;
   
   (* HU_SET = "XLXI_1_0" *) 
   M4_1E_HXILINX_Mux16  XLXI_1 (.D0(Inp[0]), 
                               .D1(Inp[4]), 
                               .D2(XLXN_51), 
                               .D3(XLXN_44), 
                               .E(XLXN_26), 
                               .S0(XLXN_43), 
                               .S1(XLXN_42), 
                               .O(S[0]));
   (* HU_SET = "XLXI_2_1" *) 
   M4_1E_HXILINX_Mux16  XLXI_2 (.D0(Inp[1]), 
                               .D1(Inp[5]), 
                               .D2(XLXN_45), 
                               .D3(XLXN_30), 
                               .E(XLXN_27), 
                               .S0(XLXN_43), 
                               .S1(XLXN_42), 
                               .O(S[1]));
   (* HU_SET = "XLXI_3_2" *) 
   M4_1E_HXILINX_Mux16  XLXI_3 (.D0(Inp[2]), 
                               .D1(Inp[6]), 
                               .D2(XLXN_46), 
                               .D3(XLXN_29), 
                               .E(XLXN_25), 
                               .S0(XLXN_43), 
                               .S1(XLXN_42), 
                               .O(S[2]));
   (* HU_SET = "XLXI_4_3" *) 
   M4_1E_HXILINX_Mux16  XLXI_4 (.D0(Inp[3]), 
                               .D1(Inp[7]), 
                               .D2(XLXN_47), 
                               .D3(XLXN_28), 
                               .E(XLXN_24), 
                               .S0(XLXN_43), 
                               .S1(XLXN_42), 
                               .O(S[3]));
   (* HU_SET = "XLXI_5_4" *) 
   CB2CE_HXILINX_Mux16  XLXI_5 (.C(Clock), 
                               .CE(XLXN_22), 
                               .CLR(XLXN_19), 
                               .CEO(), 
                               .Q0(XLXN_43), 
                               .Q1(XLXN_42), 
                               .TC());
   GND  XLXI_6 (.G(XLXN_19));
   VCC  XLXI_8 (.P(XLXN_22));
   VCC  XLXI_10 (.P(XLXN_24));
   VCC  XLXI_11 (.P(XLXN_25));
   VCC  XLXI_12 (.P(XLXN_26));
   VCC  XLXI_13 (.P(XLXN_27));
   GND  XLXI_18 (.G(XLXN_45));
   GND  XLXI_19 (.G(XLXN_46));
   GND  XLXI_20 (.G(XLXN_47));
   VCC  XLXI_21 (.P(XLXN_44));
   VCC  XLXI_22 (.P(XLXN_30));
   VCC  XLXI_23 (.P(XLXN_29));
   VCC  XLXI_24 (.P(XLXN_28));
   GND  XLXI_28 (.G(XLXN_51));
endmodule
