////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : test.vf
// /___/   /\     Timestamp : 11/04/2020 20:51:42
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/.Xilinx/Lab9/test.vf -w C:/.Xilinx/Lab9/test.sch
//Design Name: test
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module D4_16E_HXILINX_test (D0, D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, A0, A1, A2, A3, E);
    

   output D0;
   output D1;
   output D2;
   output D3;
   output D4;
   output D5;
   output D6;
   output D7;
   output D8;
   output D9;
   output D10;
   output D11;
   output D12;
   output D13;
   output D14;
   output D15;

   input  A0;
   input  A1;
   input  A2;
   input  A3;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;
   reg D4;
   reg D5;
   reg D6;
   reg D7;
   reg D8;
   reg D9;
   reg D10;
   reg D11;
   reg D12;
   reg D13;
   reg D14;
   reg D15;

      always @ (A0 or A1 or A2 or A3 or E)
      begin
         if(!E)
           {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0000;
        else
        begin
           case({A3,A2,A1,A0})
             4'b0000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0001;
             4'b0001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0010;
             4'b0010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0100;
             4'b0011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_1000;
             4'b0100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0001_0000;
             4'b0101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0010_0000;
             4'b0110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0100_0000;
             4'b0111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_1000_0000;
             4'b1000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0001_0000_0000;
             4'b1001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0010_0000_0000;
             4'b1010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0100_0000_0000;
             4'b1011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_1000_0000_0000;
             4'b1100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0001_0000_0000_0000;
             4'b1101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0010_0000_0000_0000;
             4'b1110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0100_0000_0000_0000;
             4'b1111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b1000_0000_0000_0000;
          endcase
        end
     end 

endmodule
`timescale  100 ps / 10 ps

module ADD8_HXILINX_test (CO, OFL, S, A, B, CI);


   output 	      CO;
   output 	      OFL;
   output [7:0]       S;

   input  [7:0]       A;
   input  [7:0]       B;
   input              CI;

   assign   {CO, S} = A + B + CI;
   assign   OFL     = ( A[7] & B[7] & (~S[7])) | ((~A[7]) & (~B[7]) & S[7]);

endmodule
`timescale  100 ps / 10 ps

module OR6_HXILINX_test (O, I0, I1, I2, I3, I4, I5);
    

   output O;

   input I0;
   input I1;
   input I2;
   input I3;
   input I4;
   input I5;

assign O = (I0 || I1 || I2 || I3 || I4 || I5);

endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_test (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale 100 ps / 10 ps

module FJKC_HXILINX_test(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_test(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module input2_MUSER_test(DP, 
                         In2);

    input [1:8] DP;
   output [8:1] In2;
   
   
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_1 (.I(DP[7]), 
                .O(In2[7]));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_2 (.I(DP[6]), 
                .O(In2[6]));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_3 (.I(DP[5]), 
                .O(In2[5]));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_4 (.I(DP[4]), 
                .O(In2[4]));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_5 (.I(DP[3]), 
                .O(In2[3]));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_6 (.I(DP[2]), 
                .O(In2[2]));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_7 (.I(DP[1]), 
                .O(In2[1]));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_8 (.I(DP[8]), 
                .O(In2[8]));
endmodule
`timescale 1ns / 1ps

module input1_MUSER_test(SW, 
                         In1);

    input [0:7] SW;
   output [0:7] In1;
   
   
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_1 (.I(SW[1]), 
                .O(In1[1]));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_2 (.I(SW[2]), 
                .O(In1[2]));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_3 (.I(SW[3]), 
                .O(In1[3]));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_4 (.I(SW[4]), 
                .O(In1[4]));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_5 (.I(SW[5]), 
                .O(In1[5]));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_6 (.I(SW[6]), 
                .O(In1[6]));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_7 (.I(SW[7]), 
                .O(In1[7]));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_8 (.I(SW[0]), 
                .O(In1[0]));
endmodule
`timescale 1ns / 1ps

module selectCommon_MUSER_test(Clock, 
                               com0, 
                               com1, 
                               com2, 
                               com3);

    input Clock;
   output com0;
   output com1;
   output com2;
   output com3;
   
   wire XLXN_19;
   wire XLXN_22;
   wire XLXN_46;
   wire XLXN_47;
   wire XLXN_50;
   wire XLXN_51;
   
   (* HU_SET = "XLXI_5_0" *) 
   CB2CE_HXILINX_test  XLXI_5 (.C(Clock), 
                              .CE(XLXN_22), 
                              .CLR(XLXN_19), 
                              .CEO(), 
                              .Q0(XLXN_50), 
                              .Q1(XLXN_46), 
                              .TC());
   GND  XLXI_6 (.G(XLXN_19));
   VCC  XLXI_8 (.P(XLXN_22));
   OR2  XLXI_20 (.I0(XLXN_46), 
                .I1(XLXN_50), 
                .O(com0));
   INV  XLXI_21 (.I(XLXN_46), 
                .O(XLXN_47));
   OR2  XLXI_22 (.I0(XLXN_47), 
                .I1(XLXN_50), 
                .O(com1));
   INV  XLXI_23 (.I(XLXN_50), 
                .O(XLXN_51));
   OR2  XLXI_24 (.I0(XLXN_46), 
                .I1(XLXN_51), 
                .O(com2));
   OR2  XLXI_25 (.I0(XLXN_47), 
                .I1(XLXN_51), 
                .O(com3));
endmodule
`timescale 1ns / 1ps

module div2_MUSER_test(clock_in, 
                       clock_out);

    input clock_in;
   output clock_out;
   
   wire XLXN_18;
   wire XLXN_19;
   
   (* HU_SET = "XLXI_8_1" *) 
   FJKC_HXILINX_test  XLXI_8 (.C(clock_in), 
                             .CLR(XLXN_18), 
                             .J(XLXN_19), 
                             .K(XLXN_19), 
                             .Q(clock_out));
   VCC  XLXI_9 (.P(XLXN_19));
   INV  XLXI_10 (.I(XLXN_19), 
                .O(XLXN_18));
endmodule
`timescale 1ns / 1ps

module DIV_MUSER_test(CI, 
                      CO);

    input CI;
   output CO;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   
   div2_MUSER_test  XLXI_1 (.clock_in(CI), 
                           .clock_out(XLXN_1));
   div2_MUSER_test  XLXI_2 (.clock_in(XLXN_1), 
                           .clock_out(XLXN_2));
   div2_MUSER_test  XLXI_3 (.clock_in(XLXN_2), 
                           .clock_out(XLXN_3));
   div2_MUSER_test  XLXI_4 (.clock_in(XLXN_3), 
                           .clock_out(XLXN_7));
   div2_MUSER_test  XLXI_5 (.clock_in(XLXN_7), 
                           .clock_out(XLXN_4));
   div2_MUSER_test  XLXI_6 (.clock_in(XLXN_4), 
                           .clock_out(XLXN_5));
   div2_MUSER_test  XLXI_7 (.clock_in(XLXN_5), 
                           .clock_out(XLXN_6));
   div2_MUSER_test  XLXI_8 (.clock_in(XLXN_6), 
                           .clock_out(CO));
endmodule
`timescale 1ns / 1ps

module BCD27_MUSER_test(bit, 
                        A_7, 
                        B_7, 
                        C_7, 
                        D_7, 
                        E_7, 
                        F_7, 
                        G_7);

    input [0:3] bit;
   output A_7;
   output B_7;
   output C_7;
   output D_7;
   output E_7;
   output F_7;
   output G_7;
   
   wire A;
   wire B;
   wire C;
   wire D0;
   wire D1;
   wire D2;
   wire D3;
   wire D4;
   wire D5;
   wire D6;
   wire D7;
   wire D8;
   wire D9;
   wire D10;
   wire D11;
   wire D12;
   wire D13;
   wire D14;
   wire D15;
   wire E;
   wire F;
   wire G;
   wire XLXN_37;
   wire XLXN_38;
   
   (* HU_SET = "XLXI_1_2" *) 
   D4_16E_HXILINX_test  XLXI_1 (.A0(bit[0]), 
                               .A1(bit[1]), 
                               .A2(bit[2]), 
                               .A3(bit[3]), 
                               .E(XLXN_37), 
                               .D0(D0), 
                               .D1(D1), 
                               .D2(D2), 
                               .D3(D3), 
                               .D4(D4), 
                               .D5(D5), 
                               .D6(D6), 
                               .D7(D7), 
                               .D8(D8), 
                               .D9(D9), 
                               .D10(D10), 
                               .D11(D11), 
                               .D12(D12), 
                               .D13(D13), 
                               .D14(D14), 
                               .D15(D15));
   OR4  XLXI_25 (.I0(D12), 
                .I1(D7), 
                .I2(D1), 
                .I3(D0), 
                .O(G));
   OR5  XLXI_26 (.I0(D13), 
                .I1(D7), 
                .I2(D3), 
                .I3(D2), 
                .I4(D1), 
                .O(F));
   (* HU_SET = "XLXI_27_3" *) 
   OR6_HXILINX_test  XLXI_27 (.I0(D9), 
                             .I1(D7), 
                             .I2(D5), 
                             .I3(D4), 
                             .I4(D3), 
                             .I5(D1), 
                             .O(E));
   OR4  XLXI_31 (.I0(D11), 
                .I1(D13), 
                .I2(D4), 
                .I3(D1), 
                .O(A));
   VCC  XLXI_32 (.P(XLXN_37));
   INV  XLXI_33 (.I(G), 
                .O(G_7));
   INV  XLXI_34 (.I(F), 
                .O(F_7));
   INV  XLXI_35 (.I(E), 
                .O(E_7));
   INV  XLXI_36 (.I(XLXN_38), 
                .O(D_7));
   INV  XLXI_37 (.I(C), 
                .O(C_7));
   INV  XLXI_38 (.I(B), 
                .O(B_7));
   INV  XLXI_39 (.I(A), 
                .O(A_7));
   OR5  XLXI_40 (.I0(D15), 
                .I1(D10), 
                .I2(D7), 
                .I3(D4), 
                .I4(D1), 
                .O(XLXN_38));
   OR4  XLXI_41 (.I0(D15), 
                .I1(D14), 
                .I2(D12), 
                .I3(D2), 
                .O(C));
   (* HU_SET = "XLXI_43_4" *) 
   OR6_HXILINX_test  XLXI_43 (.I0(D15), 
                             .I1(D14), 
                             .I2(D12), 
                             .I3(D11), 
                             .I4(D6), 
                             .I5(D5), 
                             .O(B));
endmodule
`timescale 1ns / 1ps

module Mux16_MUSER_test(Clock, 
                        Inp, 
                        S);

    input Clock;
    input [0:7] Inp;
   output [0:3] S;
   
   wire XLXN_19;
   wire XLXN_22;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_27;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_42;
   wire XLXN_43;
   wire XLXN_44;
   wire XLXN_45;
   wire XLXN_46;
   wire XLXN_47;
   wire XLXN_51;
   
   (* HU_SET = "XLXI_1_5" *) 
   M4_1E_HXILINX_test  XLXI_1 (.D0(Inp[0]), 
                              .D1(Inp[4]), 
                              .D2(XLXN_51), 
                              .D3(XLXN_44), 
                              .E(XLXN_26), 
                              .S0(XLXN_43), 
                              .S1(XLXN_42), 
                              .O(S[0]));
   (* HU_SET = "XLXI_2_6" *) 
   M4_1E_HXILINX_test  XLXI_2 (.D0(Inp[1]), 
                              .D1(Inp[5]), 
                              .D2(XLXN_45), 
                              .D3(XLXN_30), 
                              .E(XLXN_27), 
                              .S0(XLXN_43), 
                              .S1(XLXN_42), 
                              .O(S[1]));
   (* HU_SET = "XLXI_3_7" *) 
   M4_1E_HXILINX_test  XLXI_3 (.D0(Inp[2]), 
                              .D1(Inp[6]), 
                              .D2(XLXN_46), 
                              .D3(XLXN_29), 
                              .E(XLXN_25), 
                              .S0(XLXN_43), 
                              .S1(XLXN_42), 
                              .O(S[2]));
   (* HU_SET = "XLXI_4_8" *) 
   M4_1E_HXILINX_test  XLXI_4 (.D0(Inp[3]), 
                              .D1(Inp[7]), 
                              .D2(XLXN_47), 
                              .D3(XLXN_28), 
                              .E(XLXN_24), 
                              .S0(XLXN_43), 
                              .S1(XLXN_42), 
                              .O(S[3]));
   (* HU_SET = "XLXI_5_9" *) 
   CB2CE_HXILINX_test  XLXI_5 (.C(Clock), 
                              .CE(XLXN_22), 
                              .CLR(XLXN_19), 
                              .CEO(), 
                              .Q0(XLXN_43), 
                              .Q1(XLXN_42), 
                              .TC());
   GND  XLXI_6 (.G(XLXN_19));
   VCC  XLXI_8 (.P(XLXN_22));
   VCC  XLXI_10 (.P(XLXN_24));
   VCC  XLXI_11 (.P(XLXN_25));
   VCC  XLXI_12 (.P(XLXN_26));
   VCC  XLXI_13 (.P(XLXN_27));
   GND  XLXI_18 (.G(XLXN_45));
   GND  XLXI_19 (.G(XLXN_46));
   GND  XLXI_20 (.G(XLXN_47));
   VCC  XLXI_21 (.P(XLXN_44));
   VCC  XLXI_22 (.P(XLXN_30));
   VCC  XLXI_23 (.P(XLXN_29));
   VCC  XLXI_24 (.P(XLXN_28));
   GND  XLXI_28 (.G(XLXN_51));
endmodule
`timescale 1ns / 1ps

module test(clock, 
            DP, 
            SW, 
            a, 
            b, 
            c, 
            com0, 
            com1, 
            com3, 
            d, 
            e, 
            f, 
            g);

    input clock;
    input [1:8] DP;
    input [0:7] SW;
   output a;
   output b;
   output c;
   output com0;
   output com1;
   output com3;
   output d;
   output e;
   output f;
   output g;
   
   wire [7:0] In1;
   wire [7:0] In2;
   wire [0:7] XLXN_1;
   wire [0:3] XLXN_2;
   wire XLXN_6;
   wire XLXN_14;
   
   (* HU_SET = "XLXI_1_10" *) 
   ADD8_HXILINX_test  XLXI_1 (.A(In1[7:0]), 
                             .B(In2[7:0]), 
                             .CI(XLXN_14), 
                             .CO(), 
                             .OFL(), 
                             .S(XLXN_1[0:7]));
   Mux16_MUSER_test  XLXI_2 (.Clock(XLXN_6), 
                            .Inp(XLXN_1[0:7]), 
                            .S(XLXN_2[0:3]));
   BCD27_MUSER_test  XLXI_3 (.bit(XLXN_2[0:3]), 
                            .A_7(a), 
                            .B_7(b), 
                            .C_7(c), 
                            .D_7(d), 
                            .E_7(e), 
                            .F_7(f), 
                            .G_7(g));
   DIV_MUSER_test  XLXI_4 (.CI(clock), 
                          .CO(XLXN_6));
   selectCommon_MUSER_test  XLXI_5 (.Clock(XLXN_6), 
                                   .com0(com0), 
                                   .com1(com1), 
                                   .com2(), 
                                   .com3());
   VCC  XLXI_6 (.P(com3));
   input1_MUSER_test  XLXI_7 (.SW(SW[0:7]), 
                             .In1(In1[7:0]));
   input2_MUSER_test  XLXI_8 (.DP(DP[1:8]), 
                             .In2(In2[7:0]));
   GND  XLXI_9 (.G(XLXN_14));
endmodule
