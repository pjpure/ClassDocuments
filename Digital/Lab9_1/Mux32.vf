////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Mux32.vf
// /___/   /\     Timestamp : 11/05/2020 13:59:37
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/.Xilinx/Lab9_1/Mux32.vf -w C:/.Xilinx/Lab9_1/Mux32.sch
//Design Name: Mux32
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_Mux32 (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_Mux32(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module Mux32(iAdd, 
             iShift, 
             iSub, 
             iXor, 
             PB, 
             MN4, 
             MN5, 
             MN6, 
             MN7, 
             OutM);

    input [7:0] iAdd;
    input [7:0] iShift;
    input [7:0] iSub;
    input [7:0] iXor;
    input PB;
   output MN4;
   output MN5;
   output MN6;
   output MN7;
   output [7:0] OutM;
   
   wire XLXN_19;
   wire XLXN_22;
   wire XLXN_90;
   wire XLXN_98;
   wire XLXN_99;
   wire XLXN_100;
   wire XLXN_101;
   
   (* HU_SET = "XLXI_5_38" *) 
   CB2CE_HXILINX_Mux32  XLXI_5 (.C(PB), 
                               .CE(XLXN_22), 
                               .CLR(XLXN_19), 
                               .CEO(), 
                               .Q0(XLXN_98), 
                               .Q1(XLXN_99), 
                               .TC());
   (* HU_SET = "XLXI_6_30" *) 
   M4_1E_HXILINX_Mux32  XLXI_6 (.D0(iAdd[0]), 
                               .D1(iSub[0]), 
                               .D2(iXor[0]), 
                               .D3(iShift[0]), 
                               .E(XLXN_90), 
                               .S0(XLXN_98), 
                               .S1(XLXN_99), 
                               .O(OutM[0]));
   VCC  XLXI_8 (.P(XLXN_22));
   (* HU_SET = "XLXI_22_31" *) 
   M4_1E_HXILINX_Mux32  XLXI_22 (.D0(iAdd[1]), 
                                .D1(iSub[1]), 
                                .D2(iXor[1]), 
                                .D3(iShift[1]), 
                                .E(XLXN_90), 
                                .S0(XLXN_98), 
                                .S1(XLXN_99), 
                                .O(OutM[1]));
   (* HU_SET = "XLXI_23_32" *) 
   M4_1E_HXILINX_Mux32  XLXI_23 (.D0(iAdd[2]), 
                                .D1(iSub[2]), 
                                .D2(iXor[2]), 
                                .D3(iShift[2]), 
                                .E(XLXN_90), 
                                .S0(XLXN_98), 
                                .S1(XLXN_99), 
                                .O(OutM[2]));
   (* HU_SET = "XLXI_24_33" *) 
   M4_1E_HXILINX_Mux32  XLXI_24 (.D0(iAdd[3]), 
                                .D1(iSub[3]), 
                                .D2(iXor[3]), 
                                .D3(iShift[3]), 
                                .E(XLXN_90), 
                                .S0(XLXN_98), 
                                .S1(XLXN_99), 
                                .O(OutM[3]));
   (* HU_SET = "XLXI_25_34" *) 
   M4_1E_HXILINX_Mux32  XLXI_25 (.D0(iAdd[4]), 
                                .D1(iSub[4]), 
                                .D2(iXor[4]), 
                                .D3(iShift[4]), 
                                .E(XLXN_90), 
                                .S0(XLXN_98), 
                                .S1(XLXN_99), 
                                .O(OutM[4]));
   (* HU_SET = "XLXI_26_35" *) 
   M4_1E_HXILINX_Mux32  XLXI_26 (.D0(iAdd[5]), 
                                .D1(iSub[5]), 
                                .D2(iXor[5]), 
                                .D3(iShift[5]), 
                                .E(XLXN_90), 
                                .S0(XLXN_98), 
                                .S1(XLXN_99), 
                                .O(OutM[5]));
   (* HU_SET = "XLXI_27_36" *) 
   M4_1E_HXILINX_Mux32  XLXI_27 (.D0(iAdd[6]), 
                                .D1(iSub[6]), 
                                .D2(iXor[6]), 
                                .D3(iShift[6]), 
                                .E(XLXN_90), 
                                .S0(XLXN_98), 
                                .S1(XLXN_99), 
                                .O(OutM[6]));
   (* HU_SET = "XLXI_28_37" *) 
   M4_1E_HXILINX_Mux32  XLXI_28 (.D0(iAdd[7]), 
                                .D1(iSub[7]), 
                                .D2(iXor[7]), 
                                .D3(iShift[7]), 
                                .E(XLXN_90), 
                                .S0(XLXN_98), 
                                .S1(XLXN_99), 
                                .O(OutM[7]));
   GND  XLXI_30 (.G(XLXN_19));
   VCC  XLXI_32 (.P(XLXN_90));
   INV  XLXI_33 (.I(XLXN_98), 
                .O(XLXN_100));
   INV  XLXI_34 (.I(XLXN_99), 
                .O(XLXN_101));
   AND2  XLXI_35 (.I0(XLXN_101), 
                 .I1(XLXN_100), 
                 .O(MN7));
   AND2  XLXI_36 (.I0(XLXN_99), 
                 .I1(XLXN_100), 
                 .O(MN6));
   AND2  XLXI_37 (.I0(XLXN_101), 
                 .I1(XLXN_98), 
                 .O(MN5));
   AND2  XLXI_38 (.I0(XLXN_99), 
                 .I1(XLXN_98), 
                 .O(MN4));
endmodule
